{"version":3,"sources":["../../src/utils.js","../../src/index.js","App.js","index.js"],"names":["daysSinceJ2000","date","getHourAngle","lng","sunPos","gst","lst","computeLatitude","ha","Math","NightRegion","props","useState","positions","setpositions","getNightRegionPositions","specificDate","julianDate","getJulianDate","getGMST","latLng","sunEclPos","days","solarLongitude","anomalyOfTheSun","lambda","distanceFromSun","getSunEclipticPosition","eclObliq","T","getEclipticObliquity","sunEqPos","sunEclLng","alpha","delta","getSunEquatorialPosition","sunEqPosValue","i","useEffect","nightRegionPositions","App","MapContainer","center","lat","zoom","minZoom","worldCopyJump","TileLayer","attribution","url","fillColor","color","ReactDOM","render","document","getElementById"],"mappings":"0hBAAO,IAEMA,EAAiB,SAAAC,GAAI,OAAIA,EAAJ,SAmDrBC,EAAe,SAACC,EAAKC,EAAQC,GAExC,OAAOC,IADKD,EAAMF,EAAlB,IACkBC,EAAlB,OAGWG,EAAkB,SAACC,EAAIJ,GAGlC,OAFYK,eAAWA,SAASD,EAAKC,KAALD,GAAV,KACpBC,SAASL,QAAeK,KAAfL,GADCK,MACsCA,KADlD,IC/CWC,EAAc,SAACC,GAAU,MACFC,mBADE,IAC7BC,EAD6B,KAClBC,EADkB,KAG9BC,EAA0B,SAAAC,GAS9B,IARA,IACMC,EDjBmB,SAAAhB,GAAI,OAAKA,EAAD,MAAJ,UCiBViB,CADNF,GAAgB,IAA7B,MAEMX,EDda,SAAAY,GAGrB,OAAQ,aAAe,kBAFVjB,EAAb,IAEA,GCWcmB,CAAZ,GACMC,EAAN,GACMC,EDV4B,SAAAJ,GACpC,IAAMK,EAAOtB,EAAb,GACIuB,EAAiB,OAAU,SAA/B,EACIC,EAAkB,QAAU,SAAhC,EAUA,OAPAA,OAOO,CAAEC,QARTF,QAIgC,MAAQd,SAASe,EAAkBf,KAAlBe,GAAlCD,KAAqE,IAAOd,SAAS,EAAIe,EAAkBf,KAAtB,GAApG,KAIiBiB,gBAFO,QAAU,OAAUjB,SAASe,EAAkBf,KAAlBe,GAA7B,KAAgE,MAASf,SAAS,EAAIe,EAAkBf,KAAtB,GAA1G,MCDoBkB,CAAlB,GACMC,EDK0B,SAAAX,GAClC,IAGMY,EAHO7B,EAAb,GAGA,MAOA,OANgB,YACd6B,GAAK,UAAY,KACbA,GAAK,QAAY,KACfA,GAAK,SACHA,GAAK,QACHA,UALZ,SCVmBC,CAAjB,GACMC,EDkB8B,SAACC,EAAWJ,GAClD,IAAIK,EAAQxB,cAAUA,SAASmB,EAAWnB,KAAXmB,GAATnB,KAClBA,SAASuB,EAAYvB,KAAZuB,GADDvB,MACqCA,KADjD,GAEMyB,EAAQzB,cAAUA,SAASmB,EAAWnB,KAAXmB,GAATnB,KACpBA,SAASuB,EAAYvB,KAAZuB,GADCvB,MACmCA,KADjD,GAOA,MAAO,CAAEwB,MAFTA,GAFA,GAAkBxB,WAAWuB,EAAXvB,IAClB,GAAmBA,WAAWwB,EAAXxB,IAGHyB,SC5BGC,CAAyBd,EAAD,OAAzC,GACMe,EAAgBL,cAAtB,GACSM,EAAT,EAAgBA,GAAhB,KAA2BA,IAAK,CAC9B,IAAMlC,EAAakC,EAAnB,EAAa,IACP7B,EAAKN,EAAaC,EAAK4B,EAA7B,GACAX,EAAOiB,EAAPjB,GAAgB,CAACb,EAAgBC,EAAjB,GAAhBY,GAMF,OAHAA,KAAY,CAACgB,GAAbhB,KACAA,EAAOA,EAAPA,QAAwB,CAACgB,EAAzBhB,KAEA,GAQF,OALAkB,qBAAU,WACR,IAAMC,EAAuBxB,IAC7BD,OAFFwB,IAME,yBACEzB,UAAWA,GAFf,K,kBCda2B,MApBH,IAER,kBAACC,EAAA,EAAD,CACEC,OAAQ,CAAEC,IAAK,aAAcxC,IAAK,cAClCyC,KAAM,EACNC,QAAS,EACTC,eAAe,GAEf,kBAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,kBAAC,EAAD,CACEC,UAAU,UACVC,MAAM,aCfdC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e081a928.chunk.js","sourcesContent":["export const getJulianDate = date => (date / 86400000) + 2440587.5;\r\n\r\nexport const daysSinceJ2000 = date => date - 2451545.0;\r\n\r\nexport const getGMST = julianDate => {\r\n  const days = daysSinceJ2000(julianDate);\r\n\r\n  return (18.697374558 + 24.06570982441908 * days) % 24;\r\n}\r\n\r\nexport const getSunEclipticPosition = julianDate => {\r\n  const days = daysSinceJ2000(julianDate);\r\n  let solarLongitude = 280.460 + 0.9856474 * days;\r\n  let anomalyOfTheSun = 357.528 + 0.9856003 * days;\r\n\r\n  solarLongitude %= 360;\r\n  anomalyOfTheSun %= 360;\r\n\r\n  // ecliptic longitude of Sun\r\n  const lambda = solarLongitude + 1.915 * Math.sin(anomalyOfTheSun * Math.PI / 180) + 0.02 * Math.sin(2 * anomalyOfTheSun * Math.PI / 180);\r\n  // distance from Sun in AU\r\n  const distanceFromSun = 1.00014 - 0.01671 * Math.cos(anomalyOfTheSun * Math.PI / 180) - 0.0014 * Math.cos(2 * anomalyOfTheSun * Math.PI / 180);\r\n\r\n  return { lambda, distanceFromSun };\r\n}\r\n\r\nexport const getEclipticObliquity = julianDate => {\r\n  const days = daysSinceJ2000(julianDate);\r\n\r\n  // Julian centuries since J2000.0\r\n  const T = days / 36525;\r\n  const epsilon = 23.43929111 -\r\n    T * (46.836769 / 3600\r\n      - T * (0.0001831 / 3600\r\n        + T * (0.00200340 / 3600\r\n          - T * (0.576e-6 / 3600\r\n            - T * 4.34e-8 / 3600))));\r\n  return epsilon;\r\n}\r\n\r\nexport const getSunEquatorialPosition = (sunEclLng, eclObliq) => {\r\n  let alpha = Math.atan(Math.cos(eclObliq * Math.PI / 180)\r\n    * Math.tan(sunEclLng * Math.PI / 180)) * 180 / Math.PI;;\r\n  const delta = Math.asin(Math.sin(eclObliq * Math.PI / 180)\r\n    * Math.sin(sunEclLng * Math.PI / 180)) * 180 / Math.PI;;\r\n\r\n  const lQuadrant = Math.floor(sunEclLng / 90) * 90;\r\n  const raQuadrant = Math.floor(alpha / 90) * 90;\r\n  alpha = alpha + (lQuadrant - raQuadrant);\r\n\r\n  return { alpha, delta };\r\n}\r\n\r\nexport const getHourAngle = (lng, sunPos, gst) => {\r\n  const lst = gst + lng / 15;\r\n  return lst * 15 - sunPos.alpha;\r\n}\r\n\r\nexport const computeLatitude = (ha, sunPos) => {\r\n  const lat = Math.atan(-Math.cos(ha * Math.PI / 180) /\r\n    Math.tan(sunPos.delta * Math.PI / 180)) * 180 / Math.PI;;\r\n  return lat;\r\n}","import React, { useState, useEffect } from 'react'\nimport {\n  computeLatitude,\n  getEclipticObliquity,\n  getGMST,\n  getHourAngle,\n  getJulianDate,\n  getSunEclipticPosition,\n  getSunEquatorialPosition\n} from './utils'\nimport { Polygon } from 'react-leaflet'\n\nexport const NightRegion = (props) => {\n  const [positions, setpositions] = useState([])\n\n  const getNightRegionPositions = specificDate => {\n    const date = specificDate || new Date()\n    const julianDate = getJulianDate(date)\n    const gst = getGMST(julianDate)\n    const latLng = []\n    const sunEclPos = getSunEclipticPosition(julianDate)\n    const eclObliq = getEclipticObliquity(julianDate)\n    const sunEqPos = getSunEquatorialPosition(sunEclPos.lambda, eclObliq)\n    const sunEqPosValue = sunEqPos.delta < 0 ? 90 : -90\n    for (let i = 0; i <= 1440; i++) {\n      const lng = -360 + i / 2\n      const ha = getHourAngle(lng, sunEqPos, gst)\n      latLng[i + 1] = [computeLatitude(ha, sunEqPos), lng]\n    }\n\n    latLng[0] = [sunEqPosValue, -360]\n    latLng[latLng.length] = [sunEqPosValue, 360]\n\n    return latLng\n  }\n\n  useEffect(() => {\n    const nightRegionPositions = getNightRegionPositions()\n    setpositions(nightRegionPositions)\n  }, [])\n\n  return (\n    <Polygon\n      positions={positions}\n      {...props}\n    />\n  )\n}\n","import React from 'react'\nimport { MapContainer, TileLayer } from 'react-leaflet'\nimport { NightRegion } from 'react-leaflet-night-region'\nimport './App.css'\nimport 'leaflet/dist/leaflet.css'\nimport 'react-leaflet-night-region/dist/index.css'\n\nconst App = () => {\n  return (\n    <MapContainer\n      center={{ lat: '20.4058379', lng: '21.7496284' }}\n      zoom={3}\n      minZoom={3}\n      worldCopyJump={true}\n    >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n      />\n      <NightRegion\n        fillColor='#00345c'\n        color='#001a2e'\n      />\n    </MapContainer>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}